<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<# // NOTE - Reference your NuGet packages for Rainbow and RainbowCodeGeneration here #>
<#@ assembly name="$(SolutionDir)packages\Rainbow.Core.2.1.1\lib\net452\Rainbow.dll" #>
<#@ assembly name="$(SolutionDir)packages\Rainbow.Storage.Yaml.2.1.1\lib\net452\Rainbow.Storage.Yaml.dll" #>
<#@ assembly name="$(SolutionDir)packages\RainbowCodeGeneration.0.3.0\lib\net452\RainbowCodeGeneration.dll" #>
<# // NOTE - Reference your Sitecore.Kernel.dll and Sitecore.Logging.dll here - for Sitecore 9.3, also add Microsoft.Extensions.DependencyInjection 1.0.0 via NuGet and enable the reference below #>
<#@ assembly name="$(SolutionDir)packages\Sitecore.Kernel.9.3.0\lib\net471\Sitecore.Kernel.dll" #>
<#@ assembly name="$(SolutionDir)packages\Sitecore.Logging.9.3.0\lib\net471\Sitecore.Logging.dll" #>
<#@ assembly name="$(SolutionDir)packages\Microsoft.Extensions.DependencyInjection.Abstractions.3.1.0\lib\netstandard2.0\Microsoft.Extensions.DependencyInjection.Abstractions.dll" #>
<#@ assembly name="$(SolutionDir)packages\Microsoft.Extensions.DependencyInjection.3.1.0\lib\netstandard2.0\Microsoft.Extensions.DependencyInjection.dll" #>
<# 
// CONFIGURATION
var physicalFileStore = @"..\..\serialization"; // the path to your serialisation items
var treeName = "Feature.Maps\\Renderings"; // the name of the configuration you want to code-generate 
var treePath = "/sitecore/layout/Renderings/Feature/Maps"; // the matching path in Sitecore for the configuration

var Tool = "RainbowCodeGeneration";
var ToolVersion = "1.0";
var items = RainbowCodeGeneration.RainbowReader.GetItems(Host.ResolvePath(physicalFileStore), treeName, treePath);
#>

<#
Action<Rainbow.Model.IItemData> RenderItemsRecursively = null; // null to avoid compile-time error
RenderItemsRecursively = delegate(Rainbow.Model.IItemData item)
{ 
    #>
/// <summary>
		/// <#= item.Name #>
		/// <para><#= item.GetSharedField("__Short description") #></para>
		/// <para>Path: <#= item.Path #></para>	
		/// <para>ID: <#= item.Id #></para>	
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#=Tool#>", "<#=ToolVersion#>")]
		public struct <#= StringExtensions.AsClassName(item.Name) #>
        {
			/// <summary>
			/// The ID for <#= item.Path #>
			/// </summary>
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#=Tool#>", "<#=ToolVersion#>")]
            public static ID Id = new ID("{<#= item.Id #>}");

			/// <summary>
			/// The TemplateId string for <#= item.Path #>
			/// </summary>
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#=Tool#>", "<#=ToolVersion#>")]
			public const string TemplateId = "<#= item.TemplateId #>";        
            
            <# foreach (var children in item.GetChildren()) { 
                RenderItemsRecursively(children);
		    } 
            #>
		}
    <#
};
#>

<#@ import namespace="RainbowCodeGeneration" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated based on the Unicorn serialisation items
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ReSharper disable InconsistentNaming
namespace RainbowCodeGeneration.Test
{
	using global::Sitecore.Data;

	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#=Tool#>", "<#=ToolVersion#>")]
    public struct SitecoreKnownItems
    {
	<# foreach (var item in items) { #>

        <# RenderItemsRecursively(item); #>
		
<#  } // foreach item #>
	}
}

